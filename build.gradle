plugins {
    id 'java'
    id 'application'
    id 'checkstyle'
    id "com.moowork.node" version "1.2.0"
    id 'nu.studer.jooq' version '3.0.3'
    id "org.flywaydb.flyway" version '7.11.0'
}

repositories {
    // Use JCenter for resolving dependencies.
    jcenter()
}

dependencies {

    implementation 'org.springframework.boot:spring-boot-starter-web:2.2.6.RELEASE'
    implementation 'mysql:mysql-connector-java:8.0.12'

    compile 'com.google.code.gson:gson:2.8.6'
    compile 'com.google.guava:guava:11.0.2'
    compile 'org.jooq:jooq-codegen:3.11.9'
    compile 'org.slf4j:slf4j-api:1.7.25'
    compile 'org.thymeleaf:thymeleaf-spring5:3.0.11.RELEASE'

    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    testCompile 'junit:junit:4.13'

    compileOnly 'org.immutables:value:2.7.5'
    testCompileOnly 'org.immutables:value:2.7.5'
    annotationProcessor 'org.immutables:value:2.7.5'
    testAnnotationProcessor 'org.immutables:value:2.7.5'
    
    jooqRuntime 'mysql:mysql-connector-java:8.0.12'
    jooqRuntime project(':src-jooq-gen')
}

def dbDriver = "com.mysql.cj.jdbc.Driver"
def dbName = "testdb"
def dbUrl = "jdbc:mysql://localhost:3306/$dbName?serverTimezone=America/Chicago&useSSL=false"
def dbUser = "root"
def dbPwd = ""
flyway {
    driver = dbDriver
    url = dbUrl
    user = dbUser
    password = dbPwd
    encoding = 'UTF-8'
    locations = ["filesystem:$project.projectDir/src/main/resources/sql"]
}

jooq {
    version = '3.11.9'
    db(sourceSets.main) {
        jdbc {
            driver = dbDriver
            url = dbUrl
            user = dbUser
            password = dbPwd
        }
        generator {
            name = 'org.jooq.codegen.DefaultGenerator'
            strategy {
                name = 'com.coupon.webapp.common.jooq.JooqGeneratorStrategy'
            }
            generate {
                daos = false
                pojos = false
                fluentSetters = true
            }
            database {
                name = 'org.jooq.meta.mysql.MySQLDatabase'
                inputSchema = dbName
            }
            target {
                packageName = 'com.coupon.webapp.common.jooq'
            }
        }
    }
}

generateDbJooqSchemaSource.dependsOn(flywayClean, flywayMigrate)

def generatedMigrationFile = "/tmp/migrations.sql"
task concatMigrationFiles {
    doLast {
        def migrations = fileTree("$project.projectDir/src/main/resources/sql").sort().collect { it.getText() }.join("\n;")
        (new File(generatedMigrationFile)).text = migrations
    }
}

task generateJooqClasses(dependsOn: [generateDbJooqSchemaSource, concatMigrationFiles]) {
    group 'jooq'
    description "generate jooq classes using mysql instance"
}

compileJava.dependsOn(generateJooqClasses)

apply plugin: 'java'
ext {
    javaMainClass = 'com.coupon.webapp.CouponWebappDaemon'
}

application {
    mainClass = javaMainClass
}

apply plugin: 'checkstyle'
checkstyle {
    toolVersion '7.8.1'
    configFile file("config/checkstyle/checkstyle.xml")
}
checkstyleMain {
    source ='src/main/java'
}
checkstyleTest {
    source ='src/test/java'
}
